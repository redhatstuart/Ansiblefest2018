# Description
# ===========
# This playbook creates:
# - subnet (in the same virtual network as app gateway from pre-requisites)
# - public ip
# - load balancer
# - virtual machine scaleset

---
- hosts: localhost
  tasks:

    - name: Add subnet to existing virtual network
      azure_rm_subnet:
        resource_group: "{{ resource_group }}"
        name: "{{ vmss_name }}"
        address_prefix: "10.10.1.0/24"
        virtual_network: "{{ vnet_name }}"

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group }}"
        allocation_method: Static
        name: "{{ vmss_publicip_name }}"
        domain_name: '{{ vmss_publicip_name }}'

    - name: Create Network Security Group that allows SSH
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ vmss_name }}"
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound

    - name: Create a load balancer
      azure_rm_loadbalancer:
        name: "{{ vmss_name }}lb"
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        public_ip: "{{ vmss_publicip_name }}"
        probe_protocol: Tcp
        probe_port: 8065
        probe_interval: 10
        probe_fail_count: 3
        protocol: Tcp
        load_distribution: Default
        frontend_port: 80
        backend_port: 8065
        idle_timeout: 4
        natpool_frontend_port_start: 50000
        natpool_frontend_port_end: 50040
        natpool_backend_port: 22
        natpool_protocol: Tcp

    - name: Create VMSS
      azure_rm_virtualmachine_scaleset:
        resource_group: "{{ resource_group }}"
        name: "{{ vmss_name }}"
        vm_size: Standard_DS1_v2
        admin_username: "{{ admin_username }}"
        admin_password: "{{ admin_password }}"
        ssh_password_enabled: true
        capacity: 2
        virtual_network_name: "{{ vnet_name }}"
        subnet_name: "{{ vmss_name }}"
        upgrade_policy: Manual
        tier: Standard
        managed_disk_type: Standard_LRS
        os_disk_caching: ReadWrite
        image:
          name: "{{ vm_image_name }}"
          resource_group: "{{ resource_group }}"
        load_balancer: "{{ vmss_name }}lb"

    #
    # These tashs won't be necessary if we reuse Virtual Network and Public IP Address from previous tasks
    #
    - name: Getting Public IP address of the LB
      azure_rm_publicipaddress_facts:
        resource_group: "{{ resource_group }}"
        name: "{{ vmss_publicip_name }}"
      register: output

    - name: Call REST API - FirewallRules_CreateOrUpdate
      azure_rm_resource:
        api_version: '2017-12-01'
        resource_group: "{{ resource_group }}"
        provider: dbformysql
        resource_type: servers
        resource_name: "{{ mysql_server_name }}"
        subresource:
          - type: firewallrules
            name: vmss
        body:
          properties: 
            startIpAddress: "{{ output.ansible_facts.azure_publicipaddresses[0].properties.ipAddress }}"
            endIpAddress: "{{ output.ansible_facts.azure_publicipaddresses[0].properties.ipAddress }}"
